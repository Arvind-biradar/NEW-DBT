SECTION I



create table DEPT(
DEPTNO int(2),
DNAME varchar(15),
LOC	varchar(10)
);

insert into dept(DEPTNO ,DNAME,LOC) values(10,	'ACCOUNTING',	'NEW YORK'),
(20	,'RESEARCH','DALLAS'),(30,'SALES','CHICAGO'),(40,'OPERATIONS','BOSTON');


create table emp(
EMPNO			int,
ENAME			varchar(10),
JOB				varchar(9),
HIREDATE			date,
SAL				float(7,2),
COMM			float(7,2),
DEPTNO			tinyint);

insert into emp(EMPNO,ENAME,JOB,HIREDATE,SAL,COMM,DEPTNO	)
values(7839	,'KING'		,'MANAGER'	,'1991-11-17'	,5000	,NULL,	10),
(7698,	'BLAKE'	,'CLERK',	'1981-05-01',	2850	,NULL,	30),
(7782,	'CLARK'	,'MANAGER'	,'1981-06-09'	,'2450',	NULL,	10),
(7566,	'JONES',	'CLERK',	'1981-04-02',	2975,	NULL, 20),
(7654,	'MARTIN'	,'SALESMAN'	,'1981-09-28'	,1250,	1400	,30),
(7499,	'ALLEN'	,'SALESMAN','1981-02-20'	,1600,	300,	30);



drop table dept;
drop table emp;









#  3.Display all the employees where SAL between 2500 and 5000 (inclusive of both).;

select * from emp 
where sal  between 2500 and 5000;


#4.Display all the ENAMEs in descending order of ENAME.

select Ename from emp 
order by ename desc;




#5.Display all the JOBs in lowercase.

select Lcase(job) from emp; 




#6.Display the ENAMEs and the lengths of the ENAMEs.


select ENAME , length(ename) from emp;




#7.Display the DEPTNO and the count of employees who belong to that DEPTNO .


select deptno, count(*) from emp
group by deptno;



#8.Display the DNAMEs and the ENAMEs who belong to that DNAME.


select DNAME ,ENAME from EMP,DEPT
where emp.deptno=dept.deptno;



#9.Display the position at which the string ‘AR’ occurs in the ename.

select instr(ENAME, 'AR') from emp;





#10.Display the HRA for each employee given that HRA is 20% of SAL.

select (.2)*sal as HRA, ename from emp;
select (.2)*sal as HRA from emp;

select * from emp;
select * from dept;




SECTION II

"1.Write a stored procedure by the name of PROC1 that accepts two varchar strings as parameters.
 Your procedure should then determine if the first varchar string exists inside the varchar string.
 For example, if string1 = ‘DAC’ and string2 = ‘CDAC, then string1 exists inside string2. 
 The stored procedure should insert the appropriate message into a suitable TEMPP output table.
 Calling program for the stored procedure need not be written.";
 
 
 create table TEMPP(str1 varchar(30),str2 varchar(30) ,result varchar(15) );
 
 delimiter //
 create procedure PROC1(str1 varchar(30), str2 varchar(30))
 begin
 declare x int default -1;
 set x= instr(str2,str1);
 if x>0 then
 insert into TEMPP values(str1,str2,'Yes');
 else 
  insert into TEMPP values(str1,str2,'No');
 end if;
 end ; //
 delimiter ;
 drop procedure proc1;
 call Proc1('CDAC' , 'CDAC');
 call Proc1('PGCDAC' , 'CDAC');
 select * from tempp;
 truncate table tempp;






"2.Create a stored function by the name of FUNC1 to take three parameters, the sides of a triangle.
 The function should return a Boolean value:- TRUE if the triangle is valid, FALSE otherwise. 
 A triangle is valid if the length of each side is less than the sum of the lengths of the other two sides. 
Check if the dimensions entered can form a valid triangle. Calling program for the stored function need not be written.";


 create table Triangle(s1 int ,s2 int ,s3 int , Triangle Varchar(30) );
 
 
 
 delimiter //
 create function Fun1(s1 int, s2 int ,s3 int)
 returns boolean
 deterministic
 begin
 declare x int default false;
 
 if s1<(s2+s3) and s2<(s1+s3) and s3 <(s1+s2) then
 return true;
 else
 return false;
 end if; 
 end ; //
 delimiter ;

 
 delimiter //
 create procedure PROC2(s1 int, s2 int ,s3 int)
 begin
 declare result boolean;
  set result =fun1(s1,s2,s3);
 if result then 
 insert into Triangle(s1,s2,s3,Triangle) values(s1,s2,s3,'YES');
 else 
  insert into Triangle(s1,s2,s3,Triangle) values(s1,s2,s3,'NOT');
 end if;
 end ; //
 delimiter ;

select * from Triangle;
call proc2(3,9,5);
call proc2(3,4,5;

truncate table Triangle;




drop procedure proc2;
drop function  fun1;
